from kivy.app import App
from kivy.properties import ListProperty, StringProperty
from kivy.uix.screenmanager import ScreenManager, Screen, SwapTransition
from kivy.graphics import Color, Rectangle, Ellipse
from kivy.uix.behaviors import ButtonBehavior
from kivy.uix.label import Label
from kivy.uix.actionbar import ActionButton
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.clock import Clock
from kivy.garden.navigationdrawer import NavigationDrawer as ND
#from kivymd.theming import ThemeManager
#from kivy.actionbutton import ActionButton
import json
from customwidgets import CircRectangleButton, PlusButton, HidenMenuImage

class ScreensManager(ScreenManager):
	def __init__(self, **kwargs):
		super().__init__(**kwargs)
		self.transition = SwapTransition()

class TaskScreen(Screen):
	taskList = {'sunday': [], 'monday': [], 'tuesday': [], 'wednesday': [], 'thursday': [], 'friday': [], 'saturday': []}
	def __init__(self, **kwargs):
		super().__init__(**kwargs)

	def on_pre_enter(self, *args):
		self.dataLoader()
		for key in self.taskList:
			if self.name == key:
				copy = self.taskList[key]
				for task in copy:
					self.ids.task_container.add_widget(Task(str(task)))
					self.ids.task_container.remove_widget(Task(str(2)))

	def remove_task(self, task):
		self.ids.task_container.remove_widget(Task(str(2)))

	def dataLoader(self):
		try:
			with open('.TTM-Tasks.json', 'r')  as data:
				self.taskList = json.load(data)
		except FileNotFoundError:
			pass

class TaskAdder(Screen):
	def __init__(self, **kwargs):
		super().__init__(**kwargs)

	def dataSaver(self):
		with open('.TTM-Tasks.json', 'w') as data:
			json.dump(TaskScreen.taskList, data)

	def taskRegister(self):
		taskDay = self.ids.taskday.text
		taskDetail = self.ids.taskdetail.text
		if len(taskDay) > 0 and len(taskDetail) > 0:
			if taskDay in TaskScreen.taskList:
				TaskScreen.taskList[taskDay].append(taskDetail)
				self.manager.current = taskDay
				self.dataSaver()
		pass

class Task(BoxLayout):
	def __init__(self, tarefa, **kwargs):
		super().__init__(**kwargs)
		self.ids.label.text = tarefa

	def callRemover(self):
		TaskScreen().remove_task(self)

class TaskManagerApp(App):
	pass

TaskManagerApp().run()
